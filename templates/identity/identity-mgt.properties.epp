<%- | 
      Boolean $temp_password = false,
      Integer $pwd_min_lenght = 5,
      Integer $pwd_max_lenght = 30,
      String $pwd_java_regex = '^((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%&*])).{0,100}$',
      String $pwd_violation_msg = 'Password pattern policy violated. Password should contain a digit[0-9], a lower case letter[a-z], an upper case letter[A-Z], one of !@#$%&* characters'
| -%>

######--------------------------------
# File MANAGED by PUPPET 
# DO NOT EDIT DIRECTLY
######--------------------------------

# Enable authentication to the service using super tenant credentials and invoke operations on tenants.

UserInfoRecovery.SaaSEnable=false

# Enable email sending function when recovering the account and verifying the user creation

Notification.Sending.Enable=true
Notification.Expire.Time=5

# Whether to use hash of username when storing codes. Enable this if Registry is used to store the codes and if username
# may contain non alphanumeric characters
UserInfoRecovery.UseHashedUserNames=false
UserInfoRecovery.UsernameHashAlg=SHA-1

#Enable notification sending functionality when disabling, enabling user accounts
Notification.Sending.Enable.Account.Disable=false
Notification.Sending.Enable.Account.Enable=false

# Enable internal email sending module. If "false", email sending data would be available to application via webservice. Then application can send the email using its own email sender

Notification.Sending.Internally.Managed=true

# Enable verification of account creation. When self registration is done,  user would be verified by sending email (confirmation link) to user's email account

UserAccount.Verification.Enable=false

UserAccount.Recovery.Enable=false


# Whether user can do the verification or not. If value is defined for role, Then the email is sent to users that have been assigned to this role. Not for the user who is registered.

UserAccount.Verification.Role=

# Whether captcha verification is done by identity server or application level

Captcha.Verification.Internally.Managed=true

# Whether temporary passwords are used when creating users or recovering accounts.
<% if $temp_password == false { -%>
Temporary.Password.Enable=false
Temporary.Password.OneTime=false
Temporary.Password.Expire.Time=0
<% } else { -%>
Temporary.Password.Enable=true
Temporary.Password.OneTime=true
Temporary.Password.Expire.Time=3600
<% } -%>

# Enable authentication rules other than password check

Authentication.Policy.Enable=false

# Enable following checks during authentication.  By default account lock check is enabled.

Authentication.Policy.Check.Account.Exist=false
Authentication.Policy.Check.Account.Lock=true
Authentication.Policy.Check.Account.Disable=true
Authentication.Policy.Check.OneTime.Password=false
Authentication.Policy.Check.Password.Expire=false

# Configuration to build an authentication policy

Authentication.Policy.Password.Expire.Time=0
# If account verification is not enabled, following property will decide where user must be lock or not after user is created
Authentication.Policy.Account.Lock.On.Creation=false
Authentication.Policy.Account.Lock.Time=0
Authentication.Policy.Account.Lock.On.Failure=false
Authentication.Policy.Account.Lock.On.Failure.Max.Attempts=0

# Define pluggable extension points

Identity.Mgt.Random.Password.Generator=org.wso2.carbon.identity.mgt.password.DefaultPasswordGenerator
#Identity.Mgt.User.Data.Store=org.wso2.carbon.identity.mgt.store.UserStoreBasedIdentityDataStore
Identity.Mgt.User.Data.Store=org.wso2.carbon.identity.mgt.store.JDBCIdentityDataStore
Identity.Mgt.Notification.Sending.Module.1=org.wso2.carbon.identity.mgt.mail.DefaultEmailSendingModule
Identity.Mgt.User.Recovery.Data.Store=org.wso2.carbon.identity.mgt.store.RegistryRecoveryDataStore
Identity.Mgt.Registry.CleanUpPeriod=1440
# If following property is set to true, a registry search is performed and registry indexing is used to search for old
# confirmation codes created for the user, in order to invalidate them.
# Unless, all resources created will be retrieved and iterated over to find old confirmation codes created for the user.
Identity.Mgt.Registry.Indexing=false


# Define password policy enforce extensions

Password.policy.extensions.1=org.wso2.carbon.identity.mgt.policy.password.DefaultPasswordLengthPolicy
Password.policy.extensions.1.min.length=<%= $pwd_min_lenght %>
Password.policy.extensions.1.max.length=<%= $pwd_max_lenght %>
Password.policy.extensions.2=org.wso2.carbon.identity.mgt.policy.password.DefaultPasswordNamePolicy
Password.policy.extensions.3=org.wso2.carbon.identity.mgt.policy.password.DefaultPasswordPatternPolicy
Password.policy.extensions.3.pattern=<%= $pwd_java_regex %>
Password.policy.extensions.3.errorMsg='<%= $pwd_violation_msg %>'
